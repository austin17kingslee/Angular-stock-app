{"ast":null,"code":"import { startWith, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/material/form-field\";\nimport * as i3 from \"@angular/material/input\";\nimport * as i4 from \"@angular/material/autocomplete\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/core\";\n\nfunction DzmtAutocompleteOptgroupComponent_mat_optgroup_7_mat_option_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const name_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", name_r4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", name_r4, \" \");\n  }\n}\n\nfunction DzmtAutocompleteOptgroupComponent_mat_optgroup_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-optgroup\", 4);\n    i0.ɵɵtemplate(1, DzmtAutocompleteOptgroupComponent_mat_optgroup_7_mat_option_1_Template, 2, 2, \"mat-option\", 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const group_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"label\", group_r2.letter);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", group_r2.names);\n  }\n}\n\nexport const _filter = (opt, value) => {\n  const filterValue = value.toLowerCase();\n  return opt.filter(item => item.toLowerCase().indexOf(filterValue) === 0);\n};\nexport class DzmtAutocompleteOptgroupComponent {\n  constructor(_formBuilder) {\n    this._formBuilder = _formBuilder;\n    this.stateForm = this._formBuilder.group({\n      stateGroup: ''\n    });\n    this.stateGroups = [{\n      letter: 'A',\n      names: ['Alabama', 'Alaska', 'Arizona', 'Arkansas']\n    }, {\n      letter: 'C',\n      names: ['California', 'Colorado', 'Connecticut']\n    }, {\n      letter: 'D',\n      names: ['Delaware']\n    }, {\n      letter: 'F',\n      names: ['Florida']\n    }, {\n      letter: 'G',\n      names: ['Georgia']\n    }, {\n      letter: 'H',\n      names: ['Hawaii']\n    }, {\n      letter: 'I',\n      names: ['Idaho', 'Illinois', 'Indiana', 'Iowa']\n    }, {\n      letter: 'K',\n      names: ['Kansas', 'Kentucky']\n    }, {\n      letter: 'L',\n      names: ['Louisiana']\n    }, {\n      letter: 'M',\n      names: ['Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana']\n    }, {\n      letter: 'N',\n      names: ['Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota']\n    }, {\n      letter: 'O',\n      names: ['Ohio', 'Oklahoma', 'Oregon']\n    }, {\n      letter: 'P',\n      names: ['Pennsylvania']\n    }, {\n      letter: 'R',\n      names: ['Rhode Island']\n    }, {\n      letter: 'S',\n      names: ['South Carolina', 'South Dakota']\n    }, {\n      letter: 'T',\n      names: ['Tennessee', 'Texas']\n    }, {\n      letter: 'U',\n      names: ['Utah']\n    }, {\n      letter: 'V',\n      names: ['Vermont', 'Virginia']\n    }, {\n      letter: 'W',\n      names: ['Washington', 'West Virginia', 'Wisconsin', 'Wyoming']\n    }];\n  }\n\n  ngOnInit() {\n    this.stateGroupOptions = this.stateForm.get('stateGroup').valueChanges.pipe(startWith(''), map(value => this._filterGroup(value)));\n  }\n\n  _filterGroup(value) {\n    if (value) {\n      return this.stateGroups.map(group => ({\n        letter: group.letter,\n        names: _filter(group.names, value)\n      })).filter(group => group.names.length > 0);\n    }\n\n    return this.stateGroups;\n  }\n\n}\n\nDzmtAutocompleteOptgroupComponent.ɵfac = function DzmtAutocompleteOptgroupComponent_Factory(t) {\n  return new (t || DzmtAutocompleteOptgroupComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\n\nDzmtAutocompleteOptgroupComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DzmtAutocompleteOptgroupComponent,\n  selectors: [[\"app-dzmt-autocomplete-optgroup\"]],\n  decls: 9,\n  vars: 5,\n  consts: [[3, \"formGroup\"], [\"type\", \"text\", \"matInput\", \"\", \"formControlName\", \"stateGroup\", \"required\", \"\", 3, \"matAutocomplete\"], [\"autoGroup\", \"matAutocomplete\"], [3, \"label\", 4, \"ngFor\", \"ngForOf\"], [3, \"label\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"]],\n  template: function DzmtAutocompleteOptgroupComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵelementStart(1, \"mat-form-field\");\n      i0.ɵɵelementStart(2, \"mat-label\");\n      i0.ɵɵtext(3, \"States Group\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 1);\n      i0.ɵɵelementStart(5, \"mat-autocomplete\", null, 2);\n      i0.ɵɵtemplate(7, DzmtAutocompleteOptgroupComponent_mat_optgroup_7_Template, 2, 2, \"mat-optgroup\", 3);\n      i0.ɵɵpipe(8, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(6);\n\n      i0.ɵɵproperty(\"formGroup\", ctx.stateForm);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"matAutocomplete\", _r0);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(8, 3, ctx.stateGroupOptions));\n    }\n  },\n  directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i2.MatFormField, i2.MatLabel, i3.MatInput, i1.DefaultValueAccessor, i4.MatAutocompleteTrigger, i1.NgControlStatus, i1.FormControlName, i1.RequiredValidator, i4.MatAutocomplete, i5.NgForOf, i6.MatOptgroup, i6.MatOption],\n  pipes: [i5.AsyncPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJkem10LWF1dG9jb21wbGV0ZS1vcHRncm91cC5jb21wb25lbnQuY3NzIn0= */\"]\n});","map":{"version":3,"sources":["C:\\Users\\GHTK\\Documents\\Personal files\\20221\\GR2\\gr 2 project\\angular-stock-app\\package\\src\\app\\material\\dzmt-autocomplete\\dzmt-autocomplete-optgroup\\dzmt-autocomplete-optgroup.component.ts","C:\\Users\\GHTK\\Documents\\Personal files\\20221\\GR2\\gr 2 project\\angular-stock-app\\package\\src\\app\\material\\dzmt-autocomplete\\dzmt-autocomplete-optgroup\\dzmt-autocomplete-optgroup.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport {FormBuilder, FormGroup} from '@angular/forms';\r\nimport {Observable} from 'rxjs';\r\nimport {startWith, map} from 'rxjs/operators';\r\n\r\nexport interface StateGroup {\r\n  letter: string;\r\n  names: string[];\r\n}\r\n\r\nexport const _filter = (opt: string[], value: string): string[] => {\r\n  const filterValue = value.toLowerCase();\r\n\r\n  return opt.filter(item => item.toLowerCase().indexOf(filterValue) === 0);\r\n};\r\n\r\n\r\n@Component({\r\n  selector: 'app-dzmt-autocomplete-optgroup',\r\n  templateUrl: './dzmt-autocomplete-optgroup.component.html',\r\n  styleUrls: ['./dzmt-autocomplete-optgroup.component.css']\r\n})\r\nexport class DzmtAutocompleteOptgroupComponent implements OnInit {\r\n\r\n  stateForm: FormGroup = this._formBuilder.group({\r\n    stateGroup: '',\r\n  });\r\n\r\n  stateGroups: StateGroup[] = [{\r\n    letter: 'A',\r\n    names: ['Alabama', 'Alaska', 'Arizona', 'Arkansas']\r\n  }, {\r\n    letter: 'C',\r\n    names: ['California', 'Colorado', 'Connecticut']\r\n  }, {\r\n    letter: 'D',\r\n    names: ['Delaware']\r\n  }, {\r\n    letter: 'F',\r\n    names: ['Florida']\r\n  }, {\r\n    letter: 'G',\r\n    names: ['Georgia']\r\n  }, {\r\n    letter: 'H',\r\n    names: ['Hawaii']\r\n  }, {\r\n    letter: 'I',\r\n    names: ['Idaho', 'Illinois', 'Indiana', 'Iowa']\r\n  }, {\r\n    letter: 'K',\r\n    names: ['Kansas', 'Kentucky']\r\n  }, {\r\n    letter: 'L',\r\n    names: ['Louisiana']\r\n  }, {\r\n    letter: 'M',\r\n    names: ['Maine', 'Maryland', 'Massachusetts', 'Michigan',\r\n      'Minnesota', 'Mississippi', 'Missouri', 'Montana']\r\n  }, {\r\n    letter: 'N',\r\n    names: ['Nebraska', 'Nevada', 'New Hampshire', 'New Jersey',\r\n      'New Mexico', 'New York', 'North Carolina', 'North Dakota']\r\n  }, {\r\n    letter: 'O',\r\n    names: ['Ohio', 'Oklahoma', 'Oregon']\r\n  }, {\r\n    letter: 'P',\r\n    names: ['Pennsylvania']\r\n  }, {\r\n    letter: 'R',\r\n    names: ['Rhode Island']\r\n  }, {\r\n    letter: 'S',\r\n    names: ['South Carolina', 'South Dakota']\r\n  }, {\r\n    letter: 'T',\r\n    names: ['Tennessee', 'Texas']\r\n  }, {\r\n    letter: 'U',\r\n    names: ['Utah']\r\n  }, {\r\n    letter: 'V',\r\n    names: ['Vermont', 'Virginia']\r\n  }, {\r\n    letter: 'W',\r\n    names: ['Washington', 'West Virginia', 'Wisconsin', 'Wyoming']\r\n  }];\r\n\r\n  stateGroupOptions!: Observable<StateGroup[]>;\r\n\r\n  constructor(private _formBuilder: FormBuilder) {}\r\n\r\n  ngOnInit() {\r\n    this.stateGroupOptions = this.stateForm.get('stateGroup')!.valueChanges\r\n      .pipe(\r\n        startWith(''),\r\n        map(value => this._filterGroup(value))\r\n      );\r\n  }\r\n\r\n  private _filterGroup(value: string): StateGroup[] {\r\n    if (value) {\r\n      return this.stateGroups\r\n        .map(group => ({letter: group.letter, names: _filter(group.names, value)}))\r\n        .filter(group => group.names.length > 0);\r\n    }\r\n\r\n    return this.stateGroups;\r\n  }\r\n\r\n}\r\n","<form [formGroup]=\"stateForm\">\r\n  <mat-form-field>\r\n    <mat-label>States Group</mat-label>\r\n    <input type=\"text\"\r\n           matInput\r\n           formControlName=\"stateGroup\"\r\n           required\r\n           [matAutocomplete]=\"autoGroup\">\r\n      <mat-autocomplete #autoGroup=\"matAutocomplete\">\r\n        <mat-optgroup *ngFor=\"let group of stateGroupOptions | async\" [label]=\"group.letter\">\r\n          <mat-option *ngFor=\"let name of group.names\" [value]=\"name\">\r\n            {{name}}\r\n          </mat-option>\r\n      </mat-optgroup>\r\n    </mat-autocomplete>\r\n  </mat-form-field>\r\n</form>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}