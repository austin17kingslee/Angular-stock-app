{"version":3,"file":"progress.component.d.ts","sources":["progress.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\r\n */\r\nimport { Direction, Directionality } from '@angular/cdk/bidi';\r\nimport { ChangeDetectorRef, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\r\nimport { NzConfigKey, NzConfigService } from 'ng-zorro-antd/core/config';\r\nimport { NgStyleInterface, NumberInput } from 'ng-zorro-antd/core/types';\r\nimport { NzProgressCirclePath, NzProgressFormatter, NzProgressGapPositionType, NzProgressStatusType, NzProgressStepItem, NzProgressStrokeColorType, NzProgressStrokeLinecapType, NzProgressTypeType } from './typings';\r\nexport declare class NzProgressComponent implements OnChanges, OnInit, OnDestroy {\r\n    private cdr;\r\n    nzConfigService: NzConfigService;\r\n    private directionality;\r\n    readonly _nzModuleName: NzConfigKey;\r\n    static ngAcceptInputType_nzSuccessPercent: NumberInput;\r\n    static ngAcceptInputType_nzPercent: NumberInput;\r\n    static ngAcceptInputType_nzStrokeWidth: NumberInput;\r\n    static ngAcceptInputType_nzGapDegree: NumberInput;\r\n    static ngAcceptInputType_nzSteps: NumberInput;\r\n    nzShowInfo: boolean;\r\n    nzWidth: number;\r\n    nzStrokeColor?: NzProgressStrokeColorType;\r\n    nzSize: 'default' | 'small';\r\n    nzFormat?: NzProgressFormatter;\r\n    nzSuccessPercent?: number;\r\n    nzPercent: number;\r\n    nzStrokeWidth?: number;\r\n    nzGapDegree?: number;\r\n    nzStatus?: NzProgressStatusType;\r\n    nzType: NzProgressTypeType;\r\n    nzGapPosition: NzProgressGapPositionType;\r\n    nzStrokeLinecap: NzProgressStrokeLinecapType;\r\n    nzSteps: number;\r\n    steps: NzProgressStepItem[];\r\n    /** Gradient style when `nzType` is `line`. */\r\n    lineGradient: string | null;\r\n    /** If user uses gradient color. */\r\n    isGradient: boolean;\r\n    /** If the linear progress is a step progress. */\r\n    isSteps: boolean;\r\n    /**\r\n     * Each progress whose `nzType` is circle or dashboard should have unique id to\r\n     * define `<linearGradient>`.\r\n     */\r\n    gradientId: number;\r\n    /** Paths to rendered in the template. */\r\n    progressCirclePath: NzProgressCirclePath[];\r\n    circleGradient?: Array<{\r\n        offset: string;\r\n        color: string;\r\n    }>;\r\n    trailPathStyle: NgStyleInterface | null;\r\n    pathString?: string;\r\n    icon: string;\r\n    dir: Direction;\r\n    trackByFn: (index: number) => string;\r\n    get formatter(): NzProgressFormatter;\r\n    get status(): NzProgressStatusType;\r\n    get strokeWidth(): number;\r\n    get isCircleStyle(): boolean;\r\n    private cachedStatus;\r\n    private inferredStatus;\r\n    private destroy$;\r\n    constructor(cdr: ChangeDetectorRef, nzConfigService: NzConfigService, directionality: Directionality);\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngOnInit(): void;\r\n    ngOnDestroy(): void;\r\n    private updateIcon;\r\n    /**\r\n     * Calculate step render configs.\r\n     */\r\n    private getSteps;\r\n    /**\r\n     * Calculate paths when the type is circle or dashboard.\r\n     */\r\n    private getCirclePaths;\r\n    private setStrokeColor;\r\n}\r\n"]}