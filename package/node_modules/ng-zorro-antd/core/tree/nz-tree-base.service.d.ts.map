{"version":3,"file":"nz-tree-base.service.d.ts","sources":["nz-tree-base.service.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\r\n */\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\r\nimport { NzTreeNode, NzTreeNodeKey } from './nz-tree-base-node';\r\nimport { NzFormatEmitEvent } from './nz-tree-base.definitions';\r\nexport declare class NzTreeBaseService {\r\n    DRAG_SIDE_RANGE: number;\r\n    DRAG_MIN_GAP: number;\r\n    isCheckStrictly: boolean;\r\n    isMultiple: boolean;\r\n    selectedNode: NzTreeNode;\r\n    rootNodes: NzTreeNode[];\r\n    flattenNodes$: BehaviorSubject<NzTreeNode[]>;\r\n    selectedNodeList: NzTreeNode[];\r\n    expandedNodeList: NzTreeNode[];\r\n    checkedNodeList: NzTreeNode[];\r\n    halfCheckedNodeList: NzTreeNode[];\r\n    matchedNodeList: NzTreeNode[];\r\n    /**\r\n     * reset tree nodes will clear default node list\r\n     */\r\n    initTree(nzNodes: NzTreeNode[]): void;\r\n    flattenTreeData(nzNodes: NzTreeNode[], expandedKeys?: NzTreeNodeKey[] | true): void;\r\n    getSelectedNode(): NzTreeNode | null;\r\n    /**\r\n     * get some list\r\n     */\r\n    getSelectedNodeList(): NzTreeNode[];\r\n    /**\r\n     * return checked nodes\r\n     */\r\n    getCheckedNodeList(): NzTreeNode[];\r\n    getHalfCheckedNodeList(): NzTreeNode[];\r\n    /**\r\n     * return expanded nodes\r\n     */\r\n    getExpandedNodeList(): NzTreeNode[];\r\n    /**\r\n     * return search matched nodes\r\n     */\r\n    getMatchedNodeList(): NzTreeNode[];\r\n    isArrayOfNzTreeNode(value: NzSafeAny[]): boolean;\r\n    /**\r\n     * set drag node\r\n     */\r\n    setSelectedNode(node: NzTreeNode): void;\r\n    /**\r\n     * set node selected status\r\n     */\r\n    setNodeActive(node: NzTreeNode): void;\r\n    /**\r\n     * add or remove node to selectedNodeList\r\n     */\r\n    setSelectedNodeList(node: NzTreeNode, isMultiple?: boolean): void;\r\n    /**\r\n     * merge checked nodes\r\n     */\r\n    setHalfCheckedNodeList(node: NzTreeNode): void;\r\n    setCheckedNodeList(node: NzTreeNode): void;\r\n    /**\r\n     * conduct checked/selected/expanded keys\r\n     */\r\n    conductNodeState(type?: string): NzTreeNode[];\r\n    /**\r\n     * set expanded nodes\r\n     */\r\n    setExpandedNodeList(node: NzTreeNode): void;\r\n    setMatchedNodeList(node: NzTreeNode): void;\r\n    /**\r\n     * check state\r\n     *\r\n     * @param isCheckStrictly\r\n     */\r\n    refreshCheckState(isCheckStrictly?: boolean): void;\r\n    conduct(node: NzTreeNode, isCheckStrictly?: boolean): void;\r\n    /**\r\n     * 1、children half checked\r\n     * 2、children all checked, parent checked\r\n     * 3、no children checked\r\n     */\r\n    conductUp(node: NzTreeNode): void;\r\n    /**\r\n     * reset child check state\r\n     */\r\n    conductDown(node: NzTreeNode, value: boolean): void;\r\n    /**\r\n     * flush after delete node\r\n     */\r\n    afterRemove(nodes: NzTreeNode[]): void;\r\n    /**\r\n     * drag event\r\n     */\r\n    refreshDragNode(node: NzTreeNode): void;\r\n    resetNodeLevel(node: NzTreeNode): void;\r\n    calcDropPosition(event: DragEvent): number;\r\n    /**\r\n     * drop\r\n     * 0: inner -1: pre 1: next\r\n     */\r\n    dropAndApply(targetNode: NzTreeNode, dragPos?: number): void;\r\n    /**\r\n     * emit Structure\r\n     * eventName\r\n     * node\r\n     * event: MouseEvent / DragEvent\r\n     * dragNode\r\n     */\r\n    formatEvent(eventName: string, node: NzTreeNode | null, event: MouseEvent | DragEvent | null): NzFormatEmitEvent;\r\n    /**\r\n     * New functions for flatten nodes\r\n     */\r\n    getIndexOfArray(list: NzTreeNode[], key: string): number;\r\n    /**\r\n     * Render by nzCheckedKeys\r\n     * When keys equals null, just render with checkStrictly\r\n     *\r\n     * @param keys\r\n     * @param checkStrictly\r\n     */\r\n    conductCheck(keys: NzTreeNodeKey[] | null, checkStrictly: boolean): void;\r\n    conductExpandedKeys(keys?: NzTreeNodeKey[] | true): void;\r\n    conductSelectedKeys(keys: NzTreeNodeKey[], isMulti: boolean): void;\r\n    /**\r\n     * Expand parent nodes by child node\r\n     *\r\n     * @param node\r\n     */\r\n    expandNodeAllParentBySearch(node: NzTreeNode): void;\r\n}\r\n"]}