{"version":3,"file":"input-number.component.d.ts","sources":["input-number.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\r\n */\r\nimport { FocusMonitor } from '@angular/cdk/a11y';\r\nimport { Direction, Directionality } from '@angular/cdk/bidi';\r\nimport { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { BooleanInput, NzSizeLDSType, OnChangeType, OnTouchedType } from 'ng-zorro-antd/core/types';\r\nexport declare class NzInputNumberComponent implements ControlValueAccessor, AfterViewInit, OnChanges, OnInit, OnDestroy {\r\n    private elementRef;\r\n    private cdr;\r\n    private focusMonitor;\r\n    private directionality;\r\n    static ngAcceptInputType_nzDisabled: BooleanInput;\r\n    static ngAcceptInputType_nzAutoFocus: BooleanInput;\r\n    private autoStepTimer?;\r\n    private parsedValue?;\r\n    private value?;\r\n    private destroy$;\r\n    displayValue?: string | number;\r\n    isFocused: boolean;\r\n    disabledUp: boolean;\r\n    disabledDown: boolean;\r\n    dir: Direction;\r\n    onChange: OnChangeType;\r\n    onTouched: OnTouchedType;\r\n    readonly nzBlur: EventEmitter<any>;\r\n    readonly nzFocus: EventEmitter<any>;\r\n    inputElement: ElementRef<HTMLInputElement>;\r\n    nzSize: NzSizeLDSType;\r\n    nzMin: number;\r\n    nzMax: number;\r\n    nzParser: (value: string) => string;\r\n    nzPrecision?: number;\r\n    nzPrecisionMode: 'cut' | 'toFixed' | ((value: number | string, precision?: number) => number);\r\n    nzPlaceHolder: string;\r\n    nzStep: number;\r\n    nzInputMode: string;\r\n    nzId: string | null;\r\n    nzDisabled: boolean;\r\n    nzAutoFocus: boolean;\r\n    nzFormatter: (value: number) => string | number;\r\n    onModelChange(value: string): void;\r\n    getCurrentValidValue(value: string | number): number;\r\n    isNotCompleteNumber(num: string | number): boolean;\r\n    getValidValue(value?: string | number): string | number | undefined;\r\n    toNumber(num: string | number): number;\r\n    getRatio(e: KeyboardEvent): number;\r\n    down(e: MouseEvent | KeyboardEvent, ratio?: number): void;\r\n    up(e: MouseEvent | KeyboardEvent, ratio?: number): void;\r\n    getPrecision(value: number): number;\r\n    getMaxPrecision(currentValue: string | number, ratio: number): number;\r\n    getPrecisionFactor(currentValue: string | number, ratio: number): number;\r\n    upStep(val: string | number, rat: number): number;\r\n    downStep(val: string | number, rat: number): number;\r\n    step<T extends keyof NzInputNumberComponent>(type: T, e: MouseEvent | KeyboardEvent, ratio?: number): void;\r\n    stop(): void;\r\n    setValue(value: number): void;\r\n    updateDisplayValue(value: number): void;\r\n    onKeyDown(e: KeyboardEvent): void;\r\n    writeValue(value: number): void;\r\n    registerOnChange(fn: OnChangeType): void;\r\n    registerOnTouched(fn: OnTouchedType): void;\r\n    setDisabledState(disabled: boolean): void;\r\n    focus(): void;\r\n    blur(): void;\r\n    constructor(elementRef: ElementRef, cdr: ChangeDetectorRef, focusMonitor: FocusMonitor, directionality: Directionality);\r\n    ngOnInit(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngAfterViewInit(): void;\r\n    ngOnDestroy(): void;\r\n}\r\n"]}